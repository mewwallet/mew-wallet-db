// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Withdraw.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct WithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: String = String()

  var finalAmount: String = String()

  var minimumDeposit: String = String()

  var renFeePercentage: String = String()

  var mewFeePercentage: String = String()

  var totalFeePercentage: String = String()

  var transferFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WithdrawResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "final_amount"),
    3: .standard(proto: "minimum_deposit"),
    4: .standard(proto: "ren_fee_percentage"),
    5: .standard(proto: "mew_fee_percentage"),
    6: .standard(proto: "total_fee_percentage"),
    7: .standard(proto: "transfer_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.finalAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.minimumDeposit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.renFeePercentage) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.mewFeePercentage) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.totalFeePercentage) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.transferFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 1)
    }
    if !self.finalAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.finalAmount, fieldNumber: 2)
    }
    if !self.minimumDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minimumDeposit, fieldNumber: 3)
    }
    if !self.renFeePercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.renFeePercentage, fieldNumber: 4)
    }
    if !self.mewFeePercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.mewFeePercentage, fieldNumber: 5)
    }
    if !self.totalFeePercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.totalFeePercentage, fieldNumber: 6)
    }
    if !self.transferFee.isEmpty {
      try visitor.visitSingularStringField(value: self.transferFee, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WithdrawResponse, rhs: WithdrawResponse) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.finalAmount != rhs.finalAmount {return false}
    if lhs.minimumDeposit != rhs.minimumDeposit {return false}
    if lhs.renFeePercentage != rhs.renFeePercentage {return false}
    if lhs.mewFeePercentage != rhs.mewFeePercentage {return false}
    if lhs.totalFeePercentage != rhs.totalFeePercentage {return false}
    if lhs.transferFee != rhs.transferFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
