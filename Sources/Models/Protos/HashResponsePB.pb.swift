// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: HashResponsePB.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct HashResponsePB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: String = String()

  var blockHash: String = String()

  var blockNumber: Int32 = 0

  var from: String = String()

  var to: String = String()

  var timestamp: String = String()

  var value: String = String()

  var gas: String = String()

  var gasPrice: String = String()

  var gasUsed: String = String()

  var nonce: Int32 = 0

  var deltas: [DeltaPB] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension HashResponsePB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HashResponsePB"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "block_hash"),
    3: .standard(proto: "block_number"),
    4: .same(proto: "from"),
    5: .same(proto: "to"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "value"),
    8: .same(proto: "gas"),
    9: .standard(proto: "gas_price"),
    10: .standard(proto: "gas_used"),
    11: .same(proto: "nonce"),
    12: .same(proto: "deltas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.blockHash) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.blockNumber) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.timestamp) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.gas) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.gasUsed) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.nonce) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.deltas) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.blockHash.isEmpty {
      try visitor.visitSingularStringField(value: self.blockHash, fieldNumber: 2)
    }
    if self.blockNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.blockNumber, fieldNumber: 3)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 4)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 5)
    }
    if !self.timestamp.isEmpty {
      try visitor.visitSingularStringField(value: self.timestamp, fieldNumber: 6)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 7)
    }
    if !self.gas.isEmpty {
      try visitor.visitSingularStringField(value: self.gas, fieldNumber: 8)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 9)
    }
    if !self.gasUsed.isEmpty {
      try visitor.visitSingularStringField(value: self.gasUsed, fieldNumber: 10)
    }
    if self.nonce != 0 {
      try visitor.visitSingularInt32Field(value: self.nonce, fieldNumber: 11)
    }
    if !self.deltas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deltas, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HashResponsePB, rhs: HashResponsePB) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.blockHash != rhs.blockHash {return false}
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.value != rhs.value {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.deltas != rhs.deltas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
