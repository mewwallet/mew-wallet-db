// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _MarketTokenMeta.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketTokenMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String {
    get {return _chain ?? String()}
    set {_chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  var hasChain: Bool {return self._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  mutating func clearChain() {self._chain = nil}

  var circulatingSupply: String {
    get {return _circulatingSupply ?? String()}
    set {_circulatingSupply = newValue}
  }
  /// Returns true if `circulatingSupply` has been explicitly set.
  var hasCirculatingSupply: Bool {return self._circulatingSupply != nil}
  /// Clears the value of `circulatingSupply`. Subsequent reads from it will return its default value.
  mutating func clearCirculatingSupply() {self._circulatingSupply = nil}

  var contractAddress: String {
    get {return _contractAddress ?? String()}
    set {_contractAddress = newValue}
  }
  /// Returns true if `contractAddress` has been explicitly set.
  var hasContractAddress: Bool {return self._contractAddress != nil}
  /// Clears the value of `contractAddress`. Subsequent reads from it will return its default value.
  mutating func clearContractAddress() {self._contractAddress = nil}

  var descriptionLocalizationKey: String {
    get {return _descriptionLocalizationKey ?? String()}
    set {_descriptionLocalizationKey = newValue}
  }
  /// Returns true if `descriptionLocalizationKey` has been explicitly set.
  var hasDescriptionLocalizationKey: Bool {return self._descriptionLocalizationKey != nil}
  /// Clears the value of `descriptionLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearDescriptionLocalizationKey() {self._descriptionLocalizationKey = nil}

  var descriptionText: String {
    get {return _descriptionText ?? String()}
    set {_descriptionText = newValue}
  }
  /// Returns true if `descriptionText` has been explicitly set.
  var hasDescriptionText: Bool {return self._descriptionText != nil}
  /// Clears the value of `descriptionText`. Subsequent reads from it will return its default value.
  mutating func clearDescriptionText() {self._descriptionText = nil}

  var entryTitle: String {
    get {return _entryTitle ?? String()}
    set {_entryTitle = newValue}
  }
  /// Returns true if `entryTitle` has been explicitly set.
  var hasEntryTitle: Bool {return self._entryTitle != nil}
  /// Clears the value of `entryTitle`. Subsequent reads from it will return its default value.
  mutating func clearEntryTitle() {self._entryTitle = nil}

  var price: String {
    get {return _price ?? String()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var sint32: String {
    get {return _sint32 ?? String()}
    set {_sint32 = newValue}
  }
  /// Returns true if `sint32` has been explicitly set.
  var hasSint32: Bool {return self._sint32 != nil}
  /// Clears the value of `sint32`. Subsequent reads from it will return its default value.
  mutating func clearSint32() {self._sint32 = nil}

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var totalSupply: String {
    get {return _totalSupply ?? String()}
    set {_totalSupply = newValue}
  }
  /// Returns true if `totalSupply` has been explicitly set.
  var hasTotalSupply: Bool {return self._totalSupply != nil}
  /// Clears the value of `totalSupply`. Subsequent reads from it will return its default value.
  mutating func clearTotalSupply() {self._totalSupply = nil}

  var volume24H: String {
    get {return _volume24H ?? String()}
    set {_volume24H = newValue}
  }
  /// Returns true if `volume24H` has been explicitly set.
  var hasVolume24H: Bool {return self._volume24H != nil}
  /// Clears the value of `volume24H`. Subsequent reads from it will return its default value.
  mutating func clearVolume24H() {self._volume24H = nil}

  var website: String {
    get {return _website ?? String()}
    set {_website = newValue}
  }
  /// Returns true if `website` has been explicitly set.
  var hasWebsite: Bool {return self._website != nil}
  /// Clears the value of `website`. Subsequent reads from it will return its default value.
  mutating func clearWebsite() {self._website = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chain: String? = nil
  fileprivate var _circulatingSupply: String? = nil
  fileprivate var _contractAddress: String? = nil
  fileprivate var _descriptionLocalizationKey: String? = nil
  fileprivate var _descriptionText: String? = nil
  fileprivate var _entryTitle: String? = nil
  fileprivate var _price: String? = nil
  fileprivate var _sint32: String? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _totalSupply: String? = nil
  fileprivate var _volume24H: String? = nil
  fileprivate var _website: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketTokenMeta: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketTokenMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketTokenMeta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "circulatingSupply"),
    3: .same(proto: "contractAddress"),
    4: .same(proto: "descriptionLocalizationKey"),
    5: .same(proto: "descriptionText"),
    6: .same(proto: "entryTitle"),
    7: .same(proto: "price"),
    8: .same(proto: "sint32"),
    9: .same(proto: "timestamp"),
    10: .same(proto: "totalSupply"),
    11: .same(proto: "volume24h"),
    12: .same(proto: "website"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._chain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._circulatingSupply) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._contractAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._descriptionLocalizationKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._descriptionText) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._entryTitle) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._price) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._sint32) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._totalSupply) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._volume24H) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._website) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._circulatingSupply {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._contractAddress {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._descriptionLocalizationKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._descriptionText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._entryTitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._sint32 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._totalSupply {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._volume24H {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._website {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketTokenMeta, rhs: _MarketTokenMeta) -> Bool {
    if lhs._chain != rhs._chain {return false}
    if lhs._circulatingSupply != rhs._circulatingSupply {return false}
    if lhs._contractAddress != rhs._contractAddress {return false}
    if lhs._descriptionLocalizationKey != rhs._descriptionLocalizationKey {return false}
    if lhs._descriptionText != rhs._descriptionText {return false}
    if lhs._entryTitle != rhs._entryTitle {return false}
    if lhs._price != rhs._price {return false}
    if lhs._sint32 != rhs._sint32 {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._totalSupply != rhs._totalSupply {return false}
    if lhs._volume24H != rhs._volume24H {return false}
    if lhs._website != rhs._website {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
