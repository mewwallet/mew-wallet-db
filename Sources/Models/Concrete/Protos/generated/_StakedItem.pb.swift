// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _StakedItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _StakedItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User's address
  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  /// Provisioning request UUID
  var provisioningRequestUuid: String {
    get {return _storage._provisioningRequestUuid}
    set {_uniqueStorage()._provisioningRequestUuid = newValue}
  }

  /// Staking status
  ///  enum _TransferStatus {
  ///    CREATED                                     = 0;
  ///    SUBMITTED                                   = 1;
  ///    SUCCESS                                     = 2;
  ///    FAIL                                        = 3;
  ///    DEPOSITED                                   = 4;
  ///    PENDING                                     = 5;
  ///    ACTIVE                                      = 6;
  ///    EXITED                                      = 7;
  ///  }
  var status: String {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Staking amount
  var ethTwoStaked: String {
    get {return _storage._ethTwoStaked}
    set {_uniqueStorage()._ethTwoStaked = newValue}
  }

  /// Staking balance
  var ethTwoBalance: String {
    get {return _storage._ethTwoBalance}
    set {_uniqueStorage()._ethTwoBalance = newValue}
  }

  /// Staking earned
  var ethTwoEarned: String {
    get {return _storage._ethTwoEarned}
    set {_uniqueStorage()._ethTwoEarned = newValue}
  }

  /// Validators addresses
  var ethTwoAddresses: [String] {
    get {return _storage._ethTwoAddresses}
    set {_uniqueStorage()._ethTwoAddresses = newValue}
  }

  /// Staking exited
  var ethTwoExited: String {
    get {return _storage._ethTwoExited}
    set {_uniqueStorage()._ethTwoExited = newValue}
  }

  /// Staking exited addresses
  var ethTwoAddressesExited: [String] {
    get {return _storage._ethTwoAddressesExited}
    set {_uniqueStorage()._ethTwoAddressesExited = newValue}
  }

  /// Transaction hash
  var hash: String {
    get {return _storage._hash ?? String()}
    set {_uniqueStorage()._hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return _storage._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {_uniqueStorage()._hash = nil}

  /// Stake needs to be upgraded
  var requiresUpgrade: Bool {
    get {return _storage._requiresUpgrade}
    set {_uniqueStorage()._requiresUpgrade = newValue}
  }

  /// APR
  var apr: String {
    get {return _storage._apr ?? String()}
    set {_uniqueStorage()._apr = newValue}
  }
  /// Returns true if `apr` has been explicitly set.
  var hasApr: Bool {return _storage._apr != nil}
  /// Clears the value of `apr`. Subsequent reads from it will return its default value.
  mutating func clearApr() {_uniqueStorage()._apr = nil}

  /// Average apr
  var averageApr: String {
    get {return _storage._averageApr ?? String()}
    set {_uniqueStorage()._averageApr = newValue}
  }
  /// Returns true if `averageApr` has been explicitly set.
  var hasAverageApr: Bool {return _storage._averageApr != nil}
  /// Clears the value of `averageApr`. Subsequent reads from it will return its default value.
  mutating func clearAverageApr() {_uniqueStorage()._averageApr = nil}

  /// Timestamp
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  /// Activation queue, optional
  var queue: _StakedItemQueue {
    get {return _storage._queue ?? _StakedItemQueue()}
    set {_uniqueStorage()._queue = newValue}
  }
  /// Returns true if `queue` has been explicitly set.
  var hasQueue: Bool {return _storage._queue != nil}
  /// Clears the value of `queue`. Subsequent reads from it will return its default value.
  mutating func clearQueue() {_uniqueStorage()._queue = nil}

  /// Detailed information about balance
  var detailedInfo: _StakedItemDetailedInfo {
    get {return _storage._detailedInfo ?? _StakedItemDetailedInfo()}
    set {_uniqueStorage()._detailedInfo = newValue}
  }
  /// Returns true if `detailedInfo` has been explicitly set.
  var hasDetailedInfo: Bool {return _storage._detailedInfo != nil}
  /// Clears the value of `detailedInfo`. Subsequent reads from it will return its default value.
  mutating func clearDetailedInfo() {_uniqueStorage()._detailedInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _StakedItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _StakedItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_StakedItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "provisioning_request_uuid"),
    3: .same(proto: "status"),
    4: .standard(proto: "eth_two_staked"),
    5: .standard(proto: "eth_two_balance"),
    6: .standard(proto: "eth_two_earned"),
    7: .standard(proto: "eth_two_addresses"),
    8: .standard(proto: "eth_two_exited"),
    9: .standard(proto: "eth_two_addresses_exited"),
    10: .same(proto: "hash"),
    11: .standard(proto: "requires_upgrade"),
    12: .same(proto: "apr"),
    13: .standard(proto: "average_apr"),
    14: .same(proto: "timestamp"),
    15: .same(proto: "queue"),
    16: .standard(proto: "detailed_info"),
  ]

  fileprivate class _StorageClass {
    var _address: String = String()
    var _provisioningRequestUuid: String = String()
    var _status: String = String()
    var _ethTwoStaked: String = String()
    var _ethTwoBalance: String = String()
    var _ethTwoEarned: String = String()
    var _ethTwoAddresses: [String] = []
    var _ethTwoExited: String = String()
    var _ethTwoAddressesExited: [String] = []
    var _hash: String? = nil
    var _requiresUpgrade: Bool = false
    var _apr: String? = nil
    var _averageApr: String? = nil
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _queue: _StakedItemQueue? = nil
    var _detailedInfo: _StakedItemDetailedInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _address = source._address
      _provisioningRequestUuid = source._provisioningRequestUuid
      _status = source._status
      _ethTwoStaked = source._ethTwoStaked
      _ethTwoBalance = source._ethTwoBalance
      _ethTwoEarned = source._ethTwoEarned
      _ethTwoAddresses = source._ethTwoAddresses
      _ethTwoExited = source._ethTwoExited
      _ethTwoAddressesExited = source._ethTwoAddressesExited
      _hash = source._hash
      _requiresUpgrade = source._requiresUpgrade
      _apr = source._apr
      _averageApr = source._averageApr
      _timestamp = source._timestamp
      _queue = source._queue
      _detailedInfo = source._detailedInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._address) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._provisioningRequestUuid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._ethTwoStaked) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._ethTwoBalance) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._ethTwoEarned) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._ethTwoAddresses) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._ethTwoExited) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._ethTwoAddressesExited) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._hash) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._requiresUpgrade) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._apr) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._averageApr) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._timestamp) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._queue) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._detailedInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 1)
      }
      if !_storage._provisioningRequestUuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._provisioningRequestUuid, fieldNumber: 2)
      }
      if !_storage._status.isEmpty {
        try visitor.visitSingularStringField(value: _storage._status, fieldNumber: 3)
      }
      if !_storage._ethTwoStaked.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ethTwoStaked, fieldNumber: 4)
      }
      if !_storage._ethTwoBalance.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ethTwoBalance, fieldNumber: 5)
      }
      if !_storage._ethTwoEarned.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ethTwoEarned, fieldNumber: 6)
      }
      if !_storage._ethTwoAddresses.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ethTwoAddresses, fieldNumber: 7)
      }
      if !_storage._ethTwoExited.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ethTwoExited, fieldNumber: 8)
      }
      if !_storage._ethTwoAddressesExited.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ethTwoAddressesExited, fieldNumber: 9)
      }
      try { if let v = _storage._hash {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      if _storage._requiresUpgrade != false {
        try visitor.visitSingularBoolField(value: _storage._requiresUpgrade, fieldNumber: 11)
      }
      try { if let v = _storage._apr {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._averageApr {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._queue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._detailedInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _StakedItem, rhs: _StakedItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._address != rhs_storage._address {return false}
        if _storage._provisioningRequestUuid != rhs_storage._provisioningRequestUuid {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._ethTwoStaked != rhs_storage._ethTwoStaked {return false}
        if _storage._ethTwoBalance != rhs_storage._ethTwoBalance {return false}
        if _storage._ethTwoEarned != rhs_storage._ethTwoEarned {return false}
        if _storage._ethTwoAddresses != rhs_storage._ethTwoAddresses {return false}
        if _storage._ethTwoExited != rhs_storage._ethTwoExited {return false}
        if _storage._ethTwoAddressesExited != rhs_storage._ethTwoAddressesExited {return false}
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._requiresUpgrade != rhs_storage._requiresUpgrade {return false}
        if _storage._apr != rhs_storage._apr {return false}
        if _storage._averageApr != rhs_storage._averageApr {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._queue != rhs_storage._queue {return false}
        if _storage._detailedInfo != rhs_storage._detailedInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
