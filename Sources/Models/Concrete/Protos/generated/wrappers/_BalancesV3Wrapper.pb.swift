// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wrappers/_BalancesV3Wrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _BalancesV3Wrapper: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var balances: [_BalancesV3Wrapper._Balance] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct _Balance: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var contractAddress: String = String()

    var amount: String = String()

    var lockedAmount: String = String()

    var name: String = String()

    var symbol: String = String()

    var decimals: Int32 {
      get {return _decimals ?? 0}
      set {_decimals = newValue}
    }
    /// Returns true if `decimals` has been explicitly set.
    var hasDecimals: Bool {return self._decimals != nil}
    /// Clears the value of `decimals`. Subsequent reads from it will return its default value.
    mutating func clearDecimals() {self._decimals = nil}

    var icon: String {
      get {return _icon ?? String()}
      set {_icon = newValue}
    }
    /// Returns true if `icon` has been explicitly set.
    var hasIcon: Bool {return self._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
    mutating func clearIcon() {self._icon = nil}

    var price: String {
      get {return _price ?? String()}
      set {_price = newValue}
    }
    /// Returns true if `price` has been explicitly set.
    var hasPrice: Bool {return self._price != nil}
    /// Clears the value of `price`. Subsequent reads from it will return its default value.
    mutating func clearPrice() {self._price = nil}

    var sparkline: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _decimals: Int32? = nil
    fileprivate var _icon: String? = nil
    fileprivate var _price: String? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _BalancesV3Wrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_BalancesV3Wrapper"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}address\0\u{1}balances\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.balances) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.balances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.balances, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _BalancesV3Wrapper, rhs: _BalancesV3Wrapper) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.balances != rhs.balances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _BalancesV3Wrapper._Balance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _BalancesV3Wrapper.protoMessageName + "._Balance"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_address\0\u{1}amount\0\u{3}locked_amount\0\u{1}name\0\u{1}symbol\0\u{1}decimals\0\u{1}icon\0\u{1}price\0\u{1}sparkline\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lockedAmount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._decimals) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._icon) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._price) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.sparkline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.lockedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.lockedAmount, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 5)
    }
    try { if let v = self._decimals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._icon {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    if !self.sparkline.isEmpty {
      try visitor.visitRepeatedStringField(value: self.sparkline, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _BalancesV3Wrapper._Balance, rhs: _BalancesV3Wrapper._Balance) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.lockedAmount != rhs.lockedAmount {return false}
    if lhs.name != rhs.name {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs._decimals != rhs._decimals {return false}
    if lhs._icon != rhs._icon {return false}
    if lhs._price != rhs._price {return false}
    if lhs.sparkline != rhs.sparkline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
