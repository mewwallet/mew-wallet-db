// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wrappers/_SwapListV5TokenMetaWrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _SwapListV5TokenMetaWrapper: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the token
  var n: String = String()

  /// Symbol
  var s: String = String()

  /// Price as a string
  var p: String = String()

  /// Image URL
  var i: String = String()

  /// Chain IDs
  var c: [UInt64] = []

  /// Contract addresses
  var ca: [String] = []

  /// Decimals
  var d: [Int32] = []

  /// Featured index
  var f: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _SwapListV5TokenMetaWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_SwapListV5TokenMetaWrapper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "n"),
    2: .same(proto: "s"),
    3: .same(proto: "p"),
    4: .same(proto: "i"),
    5: .same(proto: "c"),
    6: .same(proto: "ca"),
    7: .same(proto: "d"),
    8: .same(proto: "f"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.n) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.s) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.i) }()
      case 5: try { try decoder.decodeRepeatedUInt64Field(value: &self.c) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.ca) }()
      case 7: try { try decoder.decodeRepeatedInt32Field(value: &self.d) }()
      case 8: try { try decoder.decodeRepeatedInt32Field(value: &self.f) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.n.isEmpty {
      try visitor.visitSingularStringField(value: self.n, fieldNumber: 1)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularStringField(value: self.s, fieldNumber: 2)
    }
    if !self.p.isEmpty {
      try visitor.visitSingularStringField(value: self.p, fieldNumber: 3)
    }
    if !self.i.isEmpty {
      try visitor.visitSingularStringField(value: self.i, fieldNumber: 4)
    }
    if !self.c.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.c, fieldNumber: 5)
    }
    if !self.ca.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ca, fieldNumber: 6)
    }
    if !self.d.isEmpty {
      try visitor.visitPackedInt32Field(value: self.d, fieldNumber: 7)
    }
    if !self.f.isEmpty {
      try visitor.visitPackedInt32Field(value: self.f, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _SwapListV5TokenMetaWrapper, rhs: _SwapListV5TokenMetaWrapper) -> Bool {
    if lhs.n != rhs.n {return false}
    if lhs.s != rhs.s {return false}
    if lhs.p != rhs.p {return false}
    if lhs.i != rhs.i {return false}
    if lhs.c != rhs.c {return false}
    if lhs.ca != rhs.ca {return false}
    if lhs.d != rhs.d {return false}
    if lhs.f != rhs.f {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
