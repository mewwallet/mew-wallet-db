// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wrappers/_MarketListV3Wrapper.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketListV3Wrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Tokens
  var results: [_MarketItem] = []

  /// Pagination token
  var paginationToken: String {
    get {return _paginationToken ?? String()}
    set {_paginationToken = newValue}
  }
  /// Returns true if `paginationToken` has been explicitly set.
  var hasPaginationToken: Bool {return self._paginationToken != nil}
  /// Clears the value of `paginationToken`. Subsequent reads from it will return its default value.
  mutating func clearPaginationToken() {self._paginationToken = nil}

  var currency: String {
    get {return _currency ?? String()}
    set {_currency = newValue}
  }
  /// Returns true if `currency` has been explicitly set.
  var hasCurrency: Bool {return self._currency != nil}
  /// Clears the value of `currency`. Subsequent reads from it will return its default value.
  mutating func clearCurrency() {self._currency = nil}

  var sort: String {
    get {return _sort ?? String()}
    set {_sort = newValue}
  }
  /// Returns true if `sort` has been explicitly set.
  var hasSort: Bool {return self._sort != nil}
  /// Clears the value of `sort`. Subsequent reads from it will return its default value.
  mutating func clearSort() {self._sort = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _paginationToken: String? = nil
  fileprivate var _currency: String? = nil
  fileprivate var _sort: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketListV3Wrapper: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketListV3Wrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketListV3Wrapper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
    2: .same(proto: "paginationToken"),
    3: .same(proto: "currency"),
    4: .same(proto: "sort"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._paginationToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._currency) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._sort) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    try { if let v = self._paginationToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._currency {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._sort {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketListV3Wrapper, rhs: _MarketListV3Wrapper) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs._paginationToken != rhs._paginationToken {return false}
    if lhs._currency != rhs._currency {return false}
    if lhs._sort != rhs._sort {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
