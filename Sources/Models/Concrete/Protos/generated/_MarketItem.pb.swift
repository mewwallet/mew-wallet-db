// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _MarketItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var circulatingSupply: String {
    get {return _circulatingSupply ?? String()}
    set {_circulatingSupply = newValue}
  }
  /// Returns true if `circulatingSupply` has been explicitly set.
  var hasCirculatingSupply: Bool {return self._circulatingSupply != nil}
  /// Clears the value of `circulatingSupply`. Subsequent reads from it will return its default value.
  mutating func clearCirculatingSupply() {self._circulatingSupply = nil}

  var contractAddress: String {
    get {return _contractAddress ?? String()}
    set {_contractAddress = newValue}
  }
  /// Returns true if `contractAddress` has been explicitly set.
  var hasContractAddress: Bool {return self._contractAddress != nil}
  /// Clears the value of `contractAddress`. Subsequent reads from it will return its default value.
  mutating func clearContractAddress() {self._contractAddress = nil}

  var marketCap: String {
    get {return _marketCap ?? String()}
    set {_marketCap = newValue}
  }
  /// Returns true if `marketCap` has been explicitly set.
  var hasMarketCap: Bool {return self._marketCap != nil}
  /// Clears the value of `marketCap`. Subsequent reads from it will return its default value.
  mutating func clearMarketCap() {self._marketCap = nil}

  var totalSupply: String {
    get {return _totalSupply ?? String()}
    set {_totalSupply = newValue}
  }
  /// Returns true if `totalSupply` has been explicitly set.
  var hasTotalSupply: Bool {return self._totalSupply != nil}
  /// Clears the value of `totalSupply`. Subsequent reads from it will return its default value.
  mutating func clearTotalSupply() {self._totalSupply = nil}

  var volume24H: String {
    get {return _volume24H ?? String()}
    set {_volume24H = newValue}
  }
  /// Returns true if `volume24H` has been explicitly set.
  var hasVolume24H: Bool {return self._volume24H != nil}
  /// Clears the value of `volume24H`. Subsequent reads from it will return its default value.
  mutating func clearVolume24H() {self._volume24H = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _circulatingSupply: String? = nil
  fileprivate var _contractAddress: String? = nil
  fileprivate var _marketCap: String? = nil
  fileprivate var _totalSupply: String? = nil
  fileprivate var _volume24H: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "circulatingSupply"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "marketCap"),
    4: .same(proto: "totalSupply"),
    5: .same(proto: "volume24h"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._circulatingSupply) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._contractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._marketCap) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._totalSupply) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._volume24H) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._circulatingSupply {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._contractAddress {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._marketCap {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._totalSupply {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._volume24H {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketItem, rhs: _MarketItem) -> Bool {
    if lhs._circulatingSupply != rhs._circulatingSupply {return false}
    if lhs._contractAddress != rhs._contractAddress {return false}
    if lhs._marketCap != rhs._marketCap {return false}
    if lhs._totalSupply != rhs._totalSupply {return false}
    if lhs._volume24H != rhs._volume24H {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
