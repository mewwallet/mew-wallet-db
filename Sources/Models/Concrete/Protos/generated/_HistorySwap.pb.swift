// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _HistorySwap.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represent Historical Swap record
struct _HistorySwap: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Account's address
  var address: String = String()

  /// From Token contract address
  var fromToken: String = String()

  /// To Token contract address
  var toToken: String = String()

  /// From amount
  var fromAmount: String = String()

  /// To amount
  var toAmount: String = String()

  /// Same Account's address for now
  var toAddress: String = String()

  /// Status
  var status: String = String()

  /// Dex identifier
  var dex: String = String()

  /// Transaction hash
  var hash: String = String()

  /// All hashes
  var hashes: [String] = []

  /// Replacement hashes
  var replaceHashes: Dictionary<String,String> = [:]

  /// Timestamp of the swap
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _HistorySwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_HistorySwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "from_token"),
    3: .standard(proto: "to_token"),
    4: .standard(proto: "from_amount"),
    5: .standard(proto: "to_amount"),
    6: .standard(proto: "to_address"),
    7: .same(proto: "status"),
    8: .same(proto: "dex"),
    9: .same(proto: "hash"),
    10: .same(proto: "hashes"),
    11: .same(proto: "replaceHashes"),
    12: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fromToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toToken) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fromAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.toAmount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.dex) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.hashes) }()
      case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.replaceHashes) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.fromToken.isEmpty {
      try visitor.visitSingularStringField(value: self.fromToken, fieldNumber: 2)
    }
    if !self.toToken.isEmpty {
      try visitor.visitSingularStringField(value: self.toToken, fieldNumber: 3)
    }
    if !self.fromAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAmount, fieldNumber: 4)
    }
    if !self.toAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.toAmount, fieldNumber: 5)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 6)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 7)
    }
    if !self.dex.isEmpty {
      try visitor.visitSingularStringField(value: self.dex, fieldNumber: 8)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 9)
    }
    if !self.hashes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.hashes, fieldNumber: 10)
    }
    if !self.replaceHashes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.replaceHashes, fieldNumber: 11)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _HistorySwap, rhs: _HistorySwap) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.fromToken != rhs.fromToken {return false}
    if lhs.toToken != rhs.toToken {return false}
    if lhs.fromAmount != rhs.fromAmount {return false}
    if lhs.toAmount != rhs.toAmount {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.status != rhs.status {return false}
    if lhs.dex != rhs.dex {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.hashes != rhs.hashes {return false}
    if lhs.replaceHashes != rhs.replaceHashes {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
