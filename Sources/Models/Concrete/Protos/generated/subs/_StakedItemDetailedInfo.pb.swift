// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: subs/_StakedItemDetailedInfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _StakedItemDetailedInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Current balance
  var ethTwoBalance: String = String()

  /// Rewards and fees
  var ethTwoRewardsAndFees: String = String()

  /// Only rewards
  var ethTwoRewards: String = String()

  /// Only fees
  var ethTwoFees: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _StakedItemDetailedInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_StakedItemDetailedInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "eth_two_balance"),
    2: .standard(proto: "eth_two_rewards_and_fees"),
    3: .standard(proto: "eth_two_rewards"),
    4: .standard(proto: "eth_two_fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ethTwoBalance) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ethTwoRewardsAndFees) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ethTwoRewards) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ethTwoFees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ethTwoBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.ethTwoBalance, fieldNumber: 1)
    }
    if !self.ethTwoRewardsAndFees.isEmpty {
      try visitor.visitSingularStringField(value: self.ethTwoRewardsAndFees, fieldNumber: 2)
    }
    if !self.ethTwoRewards.isEmpty {
      try visitor.visitSingularStringField(value: self.ethTwoRewards, fieldNumber: 3)
    }
    if !self.ethTwoFees.isEmpty {
      try visitor.visitSingularStringField(value: self.ethTwoFees, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _StakedItemDetailedInfo, rhs: _StakedItemDetailedInfo) -> Bool {
    if lhs.ethTwoBalance != rhs.ethTwoBalance {return false}
    if lhs.ethTwoRewardsAndFees != rhs.ethTwoRewardsAndFees {return false}
    if lhs.ethTwoRewards != rhs.ethTwoRewards {return false}
    if lhs.ethTwoFees != rhs.ethTwoFees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
