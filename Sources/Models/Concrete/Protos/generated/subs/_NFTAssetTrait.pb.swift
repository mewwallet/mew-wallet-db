// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: subs/_NFTAssetTrait.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _NFTAssetTrait: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of trait, like "author"
  var trait: String = String()

  /// Total count of the same train across the collection
  var count: UInt64 = 0

  /// Value of the trait, related to `trait`, like "0xabcd1234"
  var value: String = String()

  /// Percentage/uniqueness of the trait across all token in the collection
  var percentage: String {
    get {return _percentage ?? String()}
    set {_percentage = newValue}
  }
  /// Returns true if `percentage` has been explicitly set.
  var hasPercentage: Bool {return self._percentage != nil}
  /// Clears the value of `percentage`. Subsequent reads from it will return its default value.
  mutating func clearPercentage() {self._percentage = nil}

  /// Display type of trait
  var displayType: String = String()

  /// Deprecated
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedPercentage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _percentage: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _NFTAssetTrait: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_NFTAssetTrait"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}trait\0\u{1}count\0\u{1}value\0\u{3}deprecated_percentage\0\u{3}display_type\0\u{1}percentage\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.trait) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.count) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deprecatedPercentage) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.displayType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._percentage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.trait.isEmpty {
      try visitor.visitSingularStringField(value: self.trait, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    if !self.deprecatedPercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.deprecatedPercentage, fieldNumber: 4)
    }
    if !self.displayType.isEmpty {
      try visitor.visitSingularStringField(value: self.displayType, fieldNumber: 5)
    }
    try { if let v = self._percentage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _NFTAssetTrait, rhs: _NFTAssetTrait) -> Bool {
    if lhs.trait != rhs.trait {return false}
    if lhs.count != rhs.count {return false}
    if lhs.value != rhs.value {return false}
    if lhs._percentage != rhs._percentage {return false}
    if lhs.displayType != rhs.displayType {return false}
    if lhs.deprecatedPercentage != rhs.deprecatedPercentage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
