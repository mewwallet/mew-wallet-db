// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: subs/_NFTSocial.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _NFTSocial: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Website of the NFT collection
  var website: String {
    get {return _website ?? String()}
    set {_website = newValue}
  }
  /// Returns true if `website` has been explicitly set.
  var hasWebsite: Bool {return self._website != nil}
  /// Clears the value of `website`. Subsequent reads from it will return its default value.
  mutating func clearWebsite() {self._website = nil}

  /// Discord of the NFT collection
  var discord: String {
    get {return _discord ?? String()}
    set {_discord = newValue}
  }
  /// Returns true if `discord` has been explicitly set.
  var hasDiscord: Bool {return self._discord != nil}
  /// Clears the value of `discord`. Subsequent reads from it will return its default value.
  mutating func clearDiscord() {self._discord = nil}

  /// Telegram channel of the NFT collection
  var telegram: String {
    get {return _telegram ?? String()}
    set {_telegram = newValue}
  }
  /// Returns true if `telegram` has been explicitly set.
  var hasTelegram: Bool {return self._telegram != nil}
  /// Clears the value of `telegram`. Subsequent reads from it will return its default value.
  mutating func clearTelegram() {self._telegram = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _website: String? = nil
  fileprivate var _discord: String? = nil
  fileprivate var _telegram: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _NFTSocial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_NFTSocial"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "website"),
    2: .same(proto: "discord"),
    3: .same(proto: "telegram"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._website) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._discord) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._telegram) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._website {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._discord {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._telegram {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _NFTSocial, rhs: _NFTSocial) -> Bool {
    if lhs._website != rhs._website {return false}
    if lhs._discord != rhs._discord {return false}
    if lhs._telegram != rhs._telegram {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
