// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _MarketMoversItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketMoversItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractAddress: String {
    get {return _contractAddress ?? String()}
    set {_contractAddress = newValue}
  }
  /// Returns true if `contractAddress` has been explicitly set.
  var hasContractAddress: Bool {return self._contractAddress != nil}
  /// Clears the value of `contractAddress`. Subsequent reads from it will return its default value.
  mutating func clearContractAddress() {self._contractAddress = nil}

  var price: String {
    get {return _price ?? String()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var symbol: String {
    get {return _symbol ?? String()}
    set {_symbol = newValue}
  }
  /// Returns true if `symbol` has been explicitly set.
  var hasSymbol: Bool {return self._symbol != nil}
  /// Clears the value of `symbol`. Subsequent reads from it will return its default value.
  mutating func clearSymbol() {self._symbol = nil}

  var decimals: Int32 {
    get {return _decimals ?? 0}
    set {_decimals = newValue}
  }
  /// Returns true if `decimals` has been explicitly set.
  var hasDecimals: Bool {return self._decimals != nil}
  /// Clears the value of `decimals`. Subsequent reads from it will return its default value.
  mutating func clearDecimals() {self._decimals = nil}

  var icon: String {
    get {return _icon ?? String()}
    set {_icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return self._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {self._icon = nil}

  var iconPng: String {
    get {return _iconPng ?? String()}
    set {_iconPng = newValue}
  }
  /// Returns true if `iconPng` has been explicitly set.
  var hasIconPng: Bool {return self._iconPng != nil}
  /// Clears the value of `iconPng`. Subsequent reads from it will return its default value.
  mutating func clearIconPng() {self._iconPng = nil}

  var website: String {
    get {return _website ?? String()}
    set {_website = newValue}
  }
  /// Returns true if `website` has been explicitly set.
  var hasWebsite: Bool {return self._website != nil}
  /// Clears the value of `website`. Subsequent reads from it will return its default value.
  mutating func clearWebsite() {self._website = nil}

  var priceChangePercentage: String {
    get {return _priceChangePercentage ?? String()}
    set {_priceChangePercentage = newValue}
  }
  /// Returns true if `priceChangePercentage` has been explicitly set.
  var hasPriceChangePercentage: Bool {return self._priceChangePercentage != nil}
  /// Clears the value of `priceChangePercentage`. Subsequent reads from it will return its default value.
  mutating func clearPriceChangePercentage() {self._priceChangePercentage = nil}

  var ath: String {
    get {return _ath ?? String()}
    set {_ath = newValue}
  }
  /// Returns true if `ath` has been explicitly set.
  var hasAth: Bool {return self._ath != nil}
  /// Clears the value of `ath`. Subsequent reads from it will return its default value.
  mutating func clearAth() {self._ath = nil}

  var type: Int32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contractAddress: String? = nil
  fileprivate var _price: String? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _name: String? = nil
  fileprivate var _symbol: String? = nil
  fileprivate var _decimals: Int32? = nil
  fileprivate var _icon: String? = nil
  fileprivate var _iconPng: String? = nil
  fileprivate var _website: String? = nil
  fileprivate var _priceChangePercentage: String? = nil
  fileprivate var _ath: String? = nil
  fileprivate var _type: Int32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketMoversItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketMoversItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketMoversItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .same(proto: "price"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "name"),
    5: .same(proto: "symbol"),
    6: .same(proto: "decimals"),
    7: .same(proto: "icon"),
    8: .standard(proto: "icon_png"),
    9: .same(proto: "website"),
    10: .standard(proto: "price_change_percentage"),
    11: .same(proto: "ath"),
    12: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._price) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._symbol) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._decimals) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._icon) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._iconPng) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._website) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._priceChangePercentage) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._ath) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractAddress {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._symbol {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._decimals {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._icon {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._iconPng {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._website {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._priceChangePercentage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._ath {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketMoversItem, rhs: _MarketMoversItem) -> Bool {
    if lhs._contractAddress != rhs._contractAddress {return false}
    if lhs._price != rhs._price {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._name != rhs._name {return false}
    if lhs._symbol != rhs._symbol {return false}
    if lhs._decimals != rhs._decimals {return false}
    if lhs._icon != rhs._icon {return false}
    if lhs._iconPng != rhs._iconPng {return false}
    if lhs._website != rhs._website {return false}
    if lhs._priceChangePercentage != rhs._priceChangePercentage {return false}
    if lhs._ath != rhs._ath {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
