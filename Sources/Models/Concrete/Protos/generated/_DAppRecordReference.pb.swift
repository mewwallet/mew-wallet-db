// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _DAppRecordReference.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _DAppRecordReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reference: Data = Data()

  var uuid: UInt64 = 0

  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  var iconURL: String {
    get {return _iconURL ?? String()}
    set {_iconURL = newValue}
  }
  /// Returns true if `iconURL` has been explicitly set.
  var hasIconURL: Bool {return self._iconURL != nil}
  /// Clears the value of `iconURL`. Subsequent reads from it will return its default value.
  mutating func clearIconURL() {self._iconURL = nil}

  var preview: Data {
    get {return _preview ?? Data()}
    set {_preview = newValue}
  }
  /// Returns true if `preview` has been explicitly set.
  var hasPreview: Bool {return self._preview != nil}
  /// Clears the value of `preview`. Subsequent reads from it will return its default value.
  mutating func clearPreview() {self._preview = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _title: String? = nil
  fileprivate var _iconURL: String? = nil
  fileprivate var _preview: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _DAppRecordReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_DAppRecordReference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reference"),
    2: .same(proto: "uuid"),
    3: .same(proto: "title"),
    4: .standard(proto: "icon_url"),
    5: .same(proto: "preview"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.reference) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.uuid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._iconURL) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._preview) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.reference.isEmpty {
      try visitor.visitSingularBytesField(value: self.reference, fieldNumber: 1)
    }
    if self.uuid != 0 {
      try visitor.visitSingularUInt64Field(value: self.uuid, fieldNumber: 2)
    }
    try { if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._iconURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._preview {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _DAppRecordReference, rhs: _DAppRecordReference) -> Bool {
    if lhs.reference != rhs.reference {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs._title != rhs._title {return false}
    if lhs._iconURL != rhs._iconURL {return false}
    if lhs._preview != rhs._preview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
