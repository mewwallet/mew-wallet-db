// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _RawTransaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _RawTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash: DATA, 32 Bytes - hash of the transaction.
  var hash: String = String()

  /// from: DATA, 20 Bytes - address of the sender.
  var from: String = String()

  /// to: DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.
  var to: String {
    get {return _to ?? String()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  mutating func clearTo() {self._to = nil}

  /// value: QUANTITY - value transferred in Wei.
  var value: String = String()

  /// input: DATA - the data send along with the transaction.
  var input: String = String()

  /// nonce: QUANTITY - the number of transactions made by the sender prior to this one.
  var nonce: String = String()

  /// gas: QUANTITY - gas provided by the sender.
  var gas: String = String()

  /// gasPrice: QUANTITY - gas price provided by the sender in Wei.
  var gasPrice: String = String()

  /// blockNumber: QUANTITY - block number where this transaction was in. null when its pending.
  var blockNumber: String {
    get {return _blockNumber ?? String()}
    set {_blockNumber = newValue}
  }
  /// Returns true if `blockNumber` has been explicitly set.
  var hasBlockNumber: Bool {return self._blockNumber != nil}
  /// Clears the value of `blockNumber`. Subsequent reads from it will return its default value.
  mutating func clearBlockNumber() {self._blockNumber = nil}

  /// maxFeePerGas: QUANTITY - maxFeePerGas provided by the sender.
  var maxFeePerGas: String {
    get {return _maxFeePerGas ?? String()}
    set {_maxFeePerGas = newValue}
  }
  /// Returns true if `maxFeePerGas` has been explicitly set.
  var hasMaxFeePerGas: Bool {return self._maxFeePerGas != nil}
  /// Clears the value of `maxFeePerGas`. Subsequent reads from it will return its default value.
  mutating func clearMaxFeePerGas() {self._maxFeePerGas = nil}

  /// maxPriorityFeePerGas: QUANTITY - maxPriorityFeePerGas provided by the sender.
  var maxPriorityFeePerGas: String {
    get {return _maxPriorityFeePerGas ?? String()}
    set {_maxPriorityFeePerGas = newValue}
  }
  /// Returns true if `maxPriorityFeePerGas` has been explicitly set.
  var hasMaxPriorityFeePerGas: Bool {return self._maxPriorityFeePerGas != nil}
  /// Clears the value of `maxPriorityFeePerGas`. Subsequent reads from it will return its default value.
  mutating func clearMaxPriorityFeePerGas() {self._maxPriorityFeePerGas = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _to: String? = nil
  fileprivate var _blockNumber: String? = nil
  fileprivate var _maxFeePerGas: String? = nil
  fileprivate var _maxPriorityFeePerGas: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _RawTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_RawTransaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .same(proto: "value"),
    5: .same(proto: "input"),
    6: .same(proto: "nonce"),
    7: .same(proto: "gas"),
    8: .same(proto: "gasPrice"),
    9: .same(proto: "blockNumber"),
    10: .same(proto: "maxFeePerGas"),
    11: .same(proto: "maxPriorityFeePerGas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._to) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.input) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.nonce) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.gas) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._blockNumber) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._maxFeePerGas) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._maxPriorityFeePerGas) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    try { if let v = self._to {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 4)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularStringField(value: self.input, fieldNumber: 5)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularStringField(value: self.nonce, fieldNumber: 6)
    }
    if !self.gas.isEmpty {
      try visitor.visitSingularStringField(value: self.gas, fieldNumber: 7)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 8)
    }
    try { if let v = self._blockNumber {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._maxFeePerGas {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._maxPriorityFeePerGas {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _RawTransaction, rhs: _RawTransaction) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.from != rhs.from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.value != rhs.value {return false}
    if lhs.input != rhs.input {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs._blockNumber != rhs._blockNumber {return false}
    if lhs._maxFeePerGas != rhs._maxFeePerGas {return false}
    if lhs._maxPriorityFeePerGas != rhs._maxPriorityFeePerGas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
