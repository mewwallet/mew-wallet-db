// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _MarketCollectionItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketCollectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var actionLocalizationKey: String {
    get {return _storage._actionLocalizationKey ?? String()}
    set {_uniqueStorage()._actionLocalizationKey = newValue}
  }
  /// Returns true if `actionLocalizationKey` has been explicitly set.
  var hasActionLocalizationKey: Bool {return _storage._actionLocalizationKey != nil}
  /// Clears the value of `actionLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearActionLocalizationKey() {_uniqueStorage()._actionLocalizationKey = nil}

  var actionTitle: String {
    get {return _storage._actionTitle ?? String()}
    set {_uniqueStorage()._actionTitle = newValue}
  }
  /// Returns true if `actionTitle` has been explicitly set.
  var hasActionTitle: Bool {return _storage._actionTitle != nil}
  /// Clears the value of `actionTitle`. Subsequent reads from it will return its default value.
  mutating func clearActionTitle() {_uniqueStorage()._actionTitle = nil}

  var actionURL: String {
    get {return _storage._actionURL ?? String()}
    set {_uniqueStorage()._actionURL = newValue}
  }
  /// Returns true if `actionURL` has been explicitly set.
  var hasActionURL: Bool {return _storage._actionURL != nil}
  /// Clears the value of `actionURL`. Subsequent reads from it will return its default value.
  mutating func clearActionURL() {_uniqueStorage()._actionURL = nil}

  var bannerBig: String {
    get {return _storage._bannerBig ?? String()}
    set {_uniqueStorage()._bannerBig = newValue}
  }
  /// Returns true if `bannerBig` has been explicitly set.
  var hasBannerBig: Bool {return _storage._bannerBig != nil}
  /// Clears the value of `bannerBig`. Subsequent reads from it will return its default value.
  mutating func clearBannerBig() {_uniqueStorage()._bannerBig = nil}

  var bannerSmall: String {
    get {return _storage._bannerSmall ?? String()}
    set {_uniqueStorage()._bannerSmall = newValue}
  }
  /// Returns true if `bannerSmall` has been explicitly set.
  var hasBannerSmall: Bool {return _storage._bannerSmall != nil}
  /// Clears the value of `bannerSmall`. Subsequent reads from it will return its default value.
  mutating func clearBannerSmall() {_uniqueStorage()._bannerSmall = nil}

  var chain: String {
    get {return _storage._chain ?? String()}
    set {_uniqueStorage()._chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  var hasChain: Bool {return _storage._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  mutating func clearChain() {_uniqueStorage()._chain = nil}

  var descriptionLocalizationKey: String {
    get {return _storage._descriptionLocalizationKey ?? String()}
    set {_uniqueStorage()._descriptionLocalizationKey = newValue}
  }
  /// Returns true if `descriptionLocalizationKey` has been explicitly set.
  var hasDescriptionLocalizationKey: Bool {return _storage._descriptionLocalizationKey != nil}
  /// Clears the value of `descriptionLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearDescriptionLocalizationKey() {_uniqueStorage()._descriptionLocalizationKey = nil}

  var descriptionText: String {
    get {return _storage._descriptionText ?? String()}
    set {_uniqueStorage()._descriptionText = newValue}
  }
  /// Returns true if `descriptionText` has been explicitly set.
  var hasDescriptionText: Bool {return _storage._descriptionText != nil}
  /// Clears the value of `descriptionText`. Subsequent reads from it will return its default value.
  mutating func clearDescriptionText() {_uniqueStorage()._descriptionText = nil}

  var entryTitle: String {
    get {return _storage._entryTitle ?? String()}
    set {_uniqueStorage()._entryTitle = newValue}
  }
  /// Returns true if `entryTitle` has been explicitly set.
  var hasEntryTitle: Bool {return _storage._entryTitle != nil}
  /// Clears the value of `entryTitle`. Subsequent reads from it will return its default value.
  mutating func clearEntryTitle() {_uniqueStorage()._entryTitle = nil}

  var rank: Int32 {
    get {return _storage._rank}
    set {_uniqueStorage()._rank = newValue}
  }

  var shortDescriptionLocalizationKey: String {
    get {return _storage._shortDescriptionLocalizationKey ?? String()}
    set {_uniqueStorage()._shortDescriptionLocalizationKey = newValue}
  }
  /// Returns true if `shortDescriptionLocalizationKey` has been explicitly set.
  var hasShortDescriptionLocalizationKey: Bool {return _storage._shortDescriptionLocalizationKey != nil}
  /// Clears the value of `shortDescriptionLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearShortDescriptionLocalizationKey() {_uniqueStorage()._shortDescriptionLocalizationKey = nil}

  var shortDescriptionText: String {
    get {return _storage._shortDescriptionText ?? String()}
    set {_uniqueStorage()._shortDescriptionText = newValue}
  }
  /// Returns true if `shortDescriptionText` has been explicitly set.
  var hasShortDescriptionText: Bool {return _storage._shortDescriptionText != nil}
  /// Clears the value of `shortDescriptionText`. Subsequent reads from it will return its default value.
  mutating func clearShortDescriptionText() {_uniqueStorage()._shortDescriptionText = nil}

  var shortTitleLocalizationKey: String {
    get {return _storage._shortTitleLocalizationKey ?? String()}
    set {_uniqueStorage()._shortTitleLocalizationKey = newValue}
  }
  /// Returns true if `shortTitleLocalizationKey` has been explicitly set.
  var hasShortTitleLocalizationKey: Bool {return _storage._shortTitleLocalizationKey != nil}
  /// Clears the value of `shortTitleLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearShortTitleLocalizationKey() {_uniqueStorage()._shortTitleLocalizationKey = nil}

  var shortTitleText: String {
    get {return _storage._shortTitleText ?? String()}
    set {_uniqueStorage()._shortTitleText = newValue}
  }
  /// Returns true if `shortTitleText` has been explicitly set.
  var hasShortTitleText: Bool {return _storage._shortTitleText != nil}
  /// Clears the value of `shortTitleText`. Subsequent reads from it will return its default value.
  mutating func clearShortTitleText() {_uniqueStorage()._shortTitleText = nil}

  var theme: Int32 {
    get {return _storage._theme}
    set {_uniqueStorage()._theme = newValue}
  }

  var titleLocalizationKey: String {
    get {return _storage._titleLocalizationKey ?? String()}
    set {_uniqueStorage()._titleLocalizationKey = newValue}
  }
  /// Returns true if `titleLocalizationKey` has been explicitly set.
  var hasTitleLocalizationKey: Bool {return _storage._titleLocalizationKey != nil}
  /// Clears the value of `titleLocalizationKey`. Subsequent reads from it will return its default value.
  mutating func clearTitleLocalizationKey() {_uniqueStorage()._titleLocalizationKey = nil}

  var titleText: String {
    get {return _storage._titleText ?? String()}
    set {_uniqueStorage()._titleText = newValue}
  }
  /// Returns true if `titleText` has been explicitly set.
  var hasTitleText: Bool {return _storage._titleText != nil}
  /// Clears the value of `titleText`. Subsequent reads from it will return its default value.
  mutating func clearTitleText() {_uniqueStorage()._titleText = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketCollectionItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketCollectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketCollectionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "actionLocalizationKey"),
    2: .same(proto: "actionTitle"),
    3: .same(proto: "actionURL"),
    4: .same(proto: "bannerBig"),
    5: .same(proto: "bannerSmall"),
    6: .same(proto: "chain"),
    7: .same(proto: "descriptionLocalizationKey"),
    8: .same(proto: "descriptionText"),
    9: .same(proto: "entryTitle"),
    10: .same(proto: "rank"),
    11: .same(proto: "shortDescriptionLocalizationKey"),
    12: .same(proto: "shortDescriptionText"),
    13: .same(proto: "shortTitleLocalizationKey"),
    14: .same(proto: "shortTitleText"),
    15: .same(proto: "theme"),
    16: .same(proto: "titleLocalizationKey"),
    17: .same(proto: "titleText"),
  ]

  fileprivate class _StorageClass {
    var _actionLocalizationKey: String? = nil
    var _actionTitle: String? = nil
    var _actionURL: String? = nil
    var _bannerBig: String? = nil
    var _bannerSmall: String? = nil
    var _chain: String? = nil
    var _descriptionLocalizationKey: String? = nil
    var _descriptionText: String? = nil
    var _entryTitle: String? = nil
    var _rank: Int32 = 0
    var _shortDescriptionLocalizationKey: String? = nil
    var _shortDescriptionText: String? = nil
    var _shortTitleLocalizationKey: String? = nil
    var _shortTitleText: String? = nil
    var _theme: Int32 = 0
    var _titleLocalizationKey: String? = nil
    var _titleText: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _actionLocalizationKey = source._actionLocalizationKey
      _actionTitle = source._actionTitle
      _actionURL = source._actionURL
      _bannerBig = source._bannerBig
      _bannerSmall = source._bannerSmall
      _chain = source._chain
      _descriptionLocalizationKey = source._descriptionLocalizationKey
      _descriptionText = source._descriptionText
      _entryTitle = source._entryTitle
      _rank = source._rank
      _shortDescriptionLocalizationKey = source._shortDescriptionLocalizationKey
      _shortDescriptionText = source._shortDescriptionText
      _shortTitleLocalizationKey = source._shortTitleLocalizationKey
      _shortTitleText = source._shortTitleText
      _theme = source._theme
      _titleLocalizationKey = source._titleLocalizationKey
      _titleText = source._titleText
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._actionLocalizationKey) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._actionTitle) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._actionURL) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._bannerBig) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._bannerSmall) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._chain) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._descriptionLocalizationKey) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._descriptionText) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._entryTitle) }()
        case 10: try { try decoder.decodeSingularSInt32Field(value: &_storage._rank) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._shortDescriptionLocalizationKey) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._shortDescriptionText) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._shortTitleLocalizationKey) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._shortTitleText) }()
        case 15: try { try decoder.decodeSingularSInt32Field(value: &_storage._theme) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._titleLocalizationKey) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._titleText) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._actionLocalizationKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._actionTitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._actionURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._bannerBig {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._bannerSmall {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._chain {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._descriptionLocalizationKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._descriptionText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._entryTitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      if _storage._rank != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._rank, fieldNumber: 10)
      }
      try { if let v = _storage._shortDescriptionLocalizationKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._shortDescriptionText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._shortTitleLocalizationKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._shortTitleText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      if _storage._theme != 0 {
        try visitor.visitSingularSInt32Field(value: _storage._theme, fieldNumber: 15)
      }
      try { if let v = _storage._titleLocalizationKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._titleText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketCollectionItem, rhs: _MarketCollectionItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._actionLocalizationKey != rhs_storage._actionLocalizationKey {return false}
        if _storage._actionTitle != rhs_storage._actionTitle {return false}
        if _storage._actionURL != rhs_storage._actionURL {return false}
        if _storage._bannerBig != rhs_storage._bannerBig {return false}
        if _storage._bannerSmall != rhs_storage._bannerSmall {return false}
        if _storage._chain != rhs_storage._chain {return false}
        if _storage._descriptionLocalizationKey != rhs_storage._descriptionLocalizationKey {return false}
        if _storage._descriptionText != rhs_storage._descriptionText {return false}
        if _storage._entryTitle != rhs_storage._entryTitle {return false}
        if _storage._rank != rhs_storage._rank {return false}
        if _storage._shortDescriptionLocalizationKey != rhs_storage._shortDescriptionLocalizationKey {return false}
        if _storage._shortDescriptionText != rhs_storage._shortDescriptionText {return false}
        if _storage._shortTitleLocalizationKey != rhs_storage._shortTitleLocalizationKey {return false}
        if _storage._shortTitleText != rhs_storage._shortTitleText {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._titleLocalizationKey != rhs_storage._titleLocalizationKey {return false}
        if _storage._titleText != rhs_storage._titleText {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
