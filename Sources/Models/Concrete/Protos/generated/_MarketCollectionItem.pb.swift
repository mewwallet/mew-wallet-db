// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _MarketCollectionItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _MarketCollectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// title of the market collection.
  var entryTitle: String {
    get {return _storage._entryTitle ?? String()}
    set {_uniqueStorage()._entryTitle = newValue}
  }
  /// Returns true if `entryTitle` has been explicitly set.
  var hasEntryTitle: Bool {return _storage._entryTitle != nil}
  /// Clears the value of `entryTitle`. Subsequent reads from it will return its default value.
  mutating func clearEntryTitle() {_uniqueStorage()._entryTitle = nil}

  /// full title of the market collection.
  var title: _MarketCollectionTitle {
    get {return _storage._title ?? _MarketCollectionTitle()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  /// longer description about the market collection.
  var description_p: _MarketCollectionTitle {
    get {return _storage._description_p ?? _MarketCollectionTitle()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  /// shorter version of the title of the market collection.
  var shortTitle: _MarketCollectionTitle {
    get {return _storage._shortTitle ?? _MarketCollectionTitle()}
    set {_uniqueStorage()._shortTitle = newValue}
  }
  /// Returns true if `shortTitle` has been explicitly set.
  var hasShortTitle: Bool {return _storage._shortTitle != nil}
  /// Clears the value of `shortTitle`. Subsequent reads from it will return its default value.
  mutating func clearShortTitle() {_uniqueStorage()._shortTitle = nil}

  /// shorter version of the description of the market collection.
  var shortDescription: _MarketCollectionTitle {
    get {return _storage._shortDescription ?? _MarketCollectionTitle()}
    set {_uniqueStorage()._shortDescription = newValue}
  }
  /// Returns true if `shortDescription` has been explicitly set.
  var hasShortDescription: Bool {return _storage._shortDescription != nil}
  /// Clears the value of `shortDescription`. Subsequent reads from it will return its default value.
  mutating func clearShortDescription() {_uniqueStorage()._shortDescription = nil}

  /// information about an associated action, such as a link to an article or a tutorial.
  var action: _MarketCollectionAction {
    get {return _storage._action ?? _MarketCollectionAction()}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {_uniqueStorage()._action = nil}

  /// URLs for small and big banner images associated with the market collection.
  var banner: _MarketCollectionBanner {
    get {return _storage._banner ?? _MarketCollectionBanner()}
    set {_uniqueStorage()._banner = newValue}
  }
  /// Returns true if `banner` has been explicitly set.
  var hasBanner: Bool {return _storage._banner != nil}
  /// Clears the value of `banner`. Subsequent reads from it will return its default value.
  mutating func clearBanner() {_uniqueStorage()._banner = nil}

  /// visual theme of the market collection (e.g., "DARK").
  var theme: String {
    get {return _storage._theme ?? String()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  /// list of tokens associated with the market collection.
  var tokens: [_TokenMeta] {
    get {return _storage._tokens}
    set {_uniqueStorage()._tokens = newValue}
  }

  /// list of filters available for the market collection.
  var filters: [_MarketCollectionFilter] {
    get {return _storage._filters}
    set {_uniqueStorage()._filters = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _MarketCollectionItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _MarketCollectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_MarketCollectionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entry_title"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .standard(proto: "short_title"),
    5: .standard(proto: "short_description"),
    6: .same(proto: "action"),
    8: .same(proto: "banner"),
    9: .same(proto: "theme"),
    10: .same(proto: "tokens"),
    11: .same(proto: "filters"),
  ]

  fileprivate class _StorageClass {
    var _entryTitle: String? = nil
    var _title: _MarketCollectionTitle? = nil
    var _description_p: _MarketCollectionTitle? = nil
    var _shortTitle: _MarketCollectionTitle? = nil
    var _shortDescription: _MarketCollectionTitle? = nil
    var _action: _MarketCollectionAction? = nil
    var _banner: _MarketCollectionBanner? = nil
    var _theme: String? = nil
    var _tokens: [_TokenMeta] = []
    var _filters: [_MarketCollectionFilter] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entryTitle = source._entryTitle
      _title = source._title
      _description_p = source._description_p
      _shortTitle = source._shortTitle
      _shortDescription = source._shortDescription
      _action = source._action
      _banner = source._banner
      _theme = source._theme
      _tokens = source._tokens
      _filters = source._filters
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._entryTitle) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._title) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._shortTitle) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._shortDescription) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._action) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._banner) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._theme) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._tokens) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._filters) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._entryTitle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._title {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._shortTitle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._shortDescription {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._action {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._banner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      if !_storage._tokens.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tokens, fieldNumber: 10)
      }
      if !_storage._filters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._filters, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _MarketCollectionItem, rhs: _MarketCollectionItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._entryTitle != rhs_storage._entryTitle {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._shortTitle != rhs_storage._shortTitle {return false}
        if _storage._shortDescription != rhs_storage._shortDescription {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._banner != rhs_storage._banner {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._tokens != rhs_storage._tokens {return false}
        if _storage._filters != rhs_storage._filters {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
