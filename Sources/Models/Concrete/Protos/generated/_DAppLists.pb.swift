// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _DAppLists.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _DAppLists: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denylist: [String] = []

  var fuzzylist: [String] = []

  var allowlist: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _DAppLists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_DAppLists"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}denylist\0\u{1}fuzzylist\0\u{1}allowlist\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.denylist) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.fuzzylist) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.allowlist) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denylist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.denylist, fieldNumber: 1)
    }
    if !self.fuzzylist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fuzzylist, fieldNumber: 2)
    }
    if !self.allowlist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowlist, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _DAppLists, rhs: _DAppLists) -> Bool {
    if lhs.denylist != rhs.denylist {return false}
    if lhs.fuzzylist != rhs.fuzzylist {return false}
    if lhs.allowlist != rhs.allowlist {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
