// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _Transfer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _Transfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hex string, 32 Bytes - hash of the transaction.
  var hash: String = String()

  /// Hex string, 20 Bytes - address of the contract.
  var contractAddress: String = String()

  /// Hex string, 20 Bytes - address of the owner.
  var address: String = String()

  /// Hex string, 20 Bytes - address of the sender.
  var from: String = String()

  /// Hex string, 20 Bytes - address of the recipient.
  var to: String = String()

  /// Block number where this transaction was in
  var blockNumber: UInt64 = 0

  /// The number of transactions made by the sender prior to this one.
  var nonce: UInt64 = 0

  /// Balance delta
  var delta: String = String()

  /// Timestamp of the transaction
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  /// Transaction status
  ///  enum _TransferStatus {
  ///    PENDING                                     = 0;
  ///    SUCCESS                                     = 1;
  ///    FAILED                                      = 2;
  ///    DROPPED                                     = 3;
  ///  }
  /// Transaction status
  var status: String = String()

  /// Information about NFT, if transaction is NFT transfer
  var nft: _NFTTransfer {
    get {return _nft ?? _NFTTransfer()}
    set {_nft = newValue}
  }
  /// Returns true if `nft` has been explicitly set.
  var hasNft: Bool {return self._nft != nil}
  /// Clears the value of `nft`. Subsequent reads from it will return its default value.
  mutating func clearNft() {self._nft = nil}

  /// Flag which is indicates is tx was local
  var local: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _nft: _NFTTransfer? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension _Transfer: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_Transfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "address"),
    4: .same(proto: "from"),
    5: .same(proto: "to"),
    6: .standard(proto: "block_number"),
    7: .same(proto: "nonce"),
    8: .same(proto: "delta"),
    9: .same(proto: "timestamp"),
    10: .same(proto: "status"),
    11: .same(proto: "nft"),
    12: .same(proto: "local"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.blockNumber) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.delta) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._nft) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.local) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 4)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 5)
    }
    if self.blockNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockNumber, fieldNumber: 6)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 7)
    }
    if !self.delta.isEmpty {
      try visitor.visitSingularStringField(value: self.delta, fieldNumber: 8)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 10)
    }
    try { if let v = self._nft {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    if self.local != false {
      try visitor.visitSingularBoolField(value: self.local, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _Transfer, rhs: _Transfer) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.address != rhs.address {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.blockNumber != rhs.blockNumber {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.delta != rhs.delta {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.status != rhs.status {return false}
    if lhs._nft != rhs._nft {return false}
    if lhs.local != rhs.local {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
