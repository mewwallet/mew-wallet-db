// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: _NFTCollection.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _NFTCollection: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Account's address
  /// Note: It's not coming from API, but should be prepopulated on time of mapping
  var address: String = String()

  /// Name of the NFT collection
  var name: String = String()

  /// Description of the NFT collection
  var description_p: String = String()

  /// Image/icon of the NFT collection
  var image: String = String()

  /// Scheme of the NFT collection, might be ERC721 and ERC1155
  var schemaType: String = String()

  /// Contract address of the NFT collection, not unique, the same contract address might has different collections
  var contractAddress: String = String()

  /// Contract name of the collection, ie Rarible
  var contractName: String = String()

  /// Contract symbol of the collection, ie RARI
  var contractSymbol: String = String()

  /// Social links, like website, telegram, discord
  var social: _NFTSocial {
    get {return _social ?? _NFTSocial()}
    set {_social = newValue}
  }
  /// Returns true if `social` has been explicitly set.
  var hasSocial: Bool {return self._social != nil}
  /// Clears the value of `social`. Subsequent reads from it will return its default value.
  mutating func clearSocial() {self._social = nil}

  /// Collection stats, like count of token and number of owners
  var stats: _NFTStats {
    get {return _stats ?? _NFTStats()}
    set {_stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  var hasStats: Bool {return self._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  mutating func clearStats() {self._stats = nil}

  /// Array of assets in the collection
  var assets: [_NFTAsset] = []

  /// Temporary backend cursor to load next page
  var cursor: String {
    get {return _cursor ?? String()}
    set {_cursor = newValue}
  }
  /// Returns true if `cursor` has been explicitly set.
  var hasCursor: Bool {return self._cursor != nil}
  /// Clears the value of `cursor`. Subsequent reads from it will return its default value.
  mutating func clearCursor() {self._cursor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _social: _NFTSocial? = nil
  fileprivate var _stats: _NFTStats? = nil
  fileprivate var _cursor: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _NFTCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "_NFTCollection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "image"),
    5: .standard(proto: "schema_type"),
    6: .standard(proto: "contract_address"),
    7: .standard(proto: "contract_name"),
    8: .standard(proto: "contract_symbol"),
    9: .same(proto: "social"),
    10: .same(proto: "stats"),
    11: .same(proto: "assets"),
    12: .same(proto: "cursor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.image) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.schemaType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.contractName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.contractSymbol) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._social) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._stats) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 4)
    }
    if !self.schemaType.isEmpty {
      try visitor.visitSingularStringField(value: self.schemaType, fieldNumber: 5)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 6)
    }
    if !self.contractName.isEmpty {
      try visitor.visitSingularStringField(value: self.contractName, fieldNumber: 7)
    }
    if !self.contractSymbol.isEmpty {
      try visitor.visitSingularStringField(value: self.contractSymbol, fieldNumber: 8)
    }
    try { if let v = self._social {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._stats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 11)
    }
    try { if let v = self._cursor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _NFTCollection, rhs: _NFTCollection) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.image != rhs.image {return false}
    if lhs.schemaType != rhs.schemaType {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.contractName != rhs.contractName {return false}
    if lhs.contractSymbol != rhs.contractSymbol {return false}
    if lhs._social != rhs._social {return false}
    if lhs._stats != rhs._stats {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs._cursor != rhs._cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
